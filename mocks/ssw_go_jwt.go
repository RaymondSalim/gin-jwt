// Code generated by MockGen. DO NOT EDIT.
// Source: ssw_go_jwt.go

// Package mock_ssw_go_jwt is a generated GoMock package.
package mock_ssw_go_jwt

import (
	reflect "reflect"
	time "time"

	ssw_go_jwt "github.com/RaymondSalim/ssw-go-jwt"
	jwt "github.com/golang-jwt/jwt/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockSSWGoJWT is a mock of SSWGoJWT interface.
type MockSSWGoJWT struct {
	ctrl     *gomock.Controller
	recorder *MockSSWGoJWTMockRecorder
}

// MockSSWGoJWTMockRecorder is the mock recorder for MockSSWGoJWT.
type MockSSWGoJWTMockRecorder struct {
	mock *MockSSWGoJWT
}

// NewMockSSWGoJWT creates a new mock instance.
func NewMockSSWGoJWT(ctrl *gomock.Controller) *MockSSWGoJWT {
	mock := &MockSSWGoJWT{ctrl: ctrl}
	mock.recorder = &MockSSWGoJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSWGoJWT) EXPECT() *MockSSWGoJWTMockRecorder {
	return m.recorder
}

// GenerateTokens mocks base method.
func (m *MockSSWGoJWT) GenerateTokens(claims map[string]interface{}) (ssw_go_jwt.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", claims)
	ret0, _ := ret[0].(ssw_go_jwt.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockSSWGoJWTMockRecorder) GenerateTokens(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockSSWGoJWT)(nil).GenerateTokens), claims)
}

// Init mocks base method.
func (m *MockSSWGoJWT) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockSSWGoJWTMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSSWGoJWT)(nil).Init))
}

// RenewToken mocks base method.
func (m *MockSSWGoJWT) RenewToken(signedTokens ssw_go_jwt.Tokens) (ssw_go_jwt.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewToken", signedTokens)
	ret0, _ := ret[0].(ssw_go_jwt.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewToken indicates an expected call of RenewToken.
func (mr *MockSSWGoJWTMockRecorder) RenewToken(signedTokens interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewToken", reflect.TypeOf((*MockSSWGoJWT)(nil).RenewToken), signedTokens)
}

// ValidateAccessTokenWithClaims mocks base method.
func (m *MockSSWGoJWT) ValidateAccessTokenWithClaims(signedToken string, target *jwt.MapClaims) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccessTokenWithClaims", signedToken, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAccessTokenWithClaims indicates an expected call of ValidateAccessTokenWithClaims.
func (mr *MockSSWGoJWTMockRecorder) ValidateAccessTokenWithClaims(signedToken, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccessTokenWithClaims", reflect.TypeOf((*MockSSWGoJWT)(nil).ValidateAccessTokenWithClaims), signedToken, target)
}

// ValidateToken mocks base method.
func (m *MockSSWGoJWT) ValidateToken(signedToken string, tokenType ssw_go_jwt.TokenType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", signedToken, tokenType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockSSWGoJWTMockRecorder) ValidateToken(signedToken, tokenType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockSSWGoJWT)(nil).ValidateToken), signedToken, tokenType)
}

// generateToken mocks base method.
func (m *MockSSWGoJWT) generateToken(claims map[string]interface{}, expiresAt time.Time, signingKeyOrSecret interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "generateToken", claims, expiresAt, signingKeyOrSecret)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// generateToken indicates an expected call of generateToken.
func (mr *MockSSWGoJWTMockRecorder) generateToken(claims, expiresAt, signingKeyOrSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "generateToken", reflect.TypeOf((*MockSSWGoJWT)(nil).generateToken), claims, expiresAt, signingKeyOrSecret)
}

// getKeyFunc mocks base method.
func (m *MockSSWGoJWT) getKeyFunc(tokenType ssw_go_jwt.TokenType) func(*jwt.Token) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getKeyFunc", tokenType)
	ret0, _ := ret[0].(func(*jwt.Token) (interface{}, error))
	return ret0
}

// getKeyFunc indicates an expected call of getKeyFunc.
func (mr *MockSSWGoJWTMockRecorder) getKeyFunc(tokenType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getKeyFunc", reflect.TypeOf((*MockSSWGoJWT)(nil).getKeyFunc), tokenType)
}

// getSigningKeyOrSecret mocks base method.
func (m *MockSSWGoJWT) getSigningKeyOrSecret(tokenType ssw_go_jwt.TokenType) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getSigningKeyOrSecret", tokenType)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// getSigningKeyOrSecret indicates an expected call of getSigningKeyOrSecret.
func (mr *MockSSWGoJWTMockRecorder) getSigningKeyOrSecret(tokenType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSigningKeyOrSecret", reflect.TypeOf((*MockSSWGoJWT)(nil).getSigningKeyOrSecret), tokenType)
}

// validateConfig mocks base method.
func (m *MockSSWGoJWT) validateConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "validateConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// validateConfig indicates an expected call of validateConfig.
func (mr *MockSSWGoJWTMockRecorder) validateConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "validateConfig", reflect.TypeOf((*MockSSWGoJWT)(nil).validateConfig))
}
